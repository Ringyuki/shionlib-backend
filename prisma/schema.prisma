generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user roles: 1 -> user, 2 -> admin, 3 -> super_admin
// user status: 1 -> active, 2 -> banned
// user lang: en -> English, zh -> Chinese(Simplified), ja -> Japanese
enum UserLang {
  en
  zh
  ja
}

model User {
  id       Int     @id @default(autoincrement())
  name     String  @unique @db.VarChar(20)
  email    String  @unique @db.VarChar(255)
  password String  @db.VarChar(255)
  avatar   String?
  cover    String?

  games                        Game[]                     @relation("user_create_game")
  game_download_resources      GameDownloadResource[]     @relation("user_create_game_download_resource")
  game_download_resource_files GameDownloadResourceFile[] @relation("user_create_game_download_resource_file")
  comments                     Comment[]                  @relation("user_create_comment")

  favorite_games GameFavoriteRelation[] @relation("user_favorite_game")

  lang   UserLang @default(en)
  role   Int      @default(1)
  status Int      @default(1)

  email_verified_at  DateTime?
  last_login_at      DateTime?
  two_factor_enabled Boolean   @default(false)

  created              DateTime            @default(now())
  updated              DateTime            @updatedAt
  sessions             UserLoginSession[]  @relation("user_login_session")
  game_upload_sessions GameUploadSession[] @relation("user_create_game_upload_session")

  @@index([email])
  @@index([name])
  @@index([created])
  @@map("users")
}

// user login session status: 1 -> active, 2 -> rotated, 3 -> reused, 4 -> blocked
model UserLoginSession {
  id Int @id @default(autoincrement())

  user_id              Int
  user                 User   @relation("user_login_session", fields: [user_id], references: [id])
  refresh_token_hash   String @db.VarChar(255)
  refresh_token_prefix String @db.VarChar(32)
  status               Int    @default(1)

  // Rotation chain / family for bulk revoke
  family_id         String             @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  replaced_by_id    Int?
  replaced_by       UserLoginSession?  @relation("session_replacement", fields: [replaced_by_id], references: [id])
  replaced_sessions UserLoginSession[] @relation("session_replacement")

  expires_at     DateTime
  last_used_at   DateTime?
  rotated_at     DateTime?
  reused_at      DateTime?
  blocked_at     DateTime?
  blocked_reason String?   @db.VarChar(255)

  ip          String?
  user_agent  String?
  device_info String?

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([refresh_token_prefix])
  @@index([family_id])
  @@index([user_id, status])
  @@map("user_login_sessions")
}

// game status: 1 -> visible, 2 -> hide
// game staffs: Array<Record<name, role>>
// extra_info: Array<Record<key, value>>
model Game {
  id           Int         @id @default(autoincrement())
  v_id         String?
  b_id         String?
  title_jp     String      @default("") @db.VarChar(255)
  title_zh     String      @default("") @db.VarChar(255)
  title_en     String      @default("") @db.VarChar(255)
  aliases      String[]    @default([])
  intro_jp     String      @default("") @db.VarChar(2000)
  intro_zh     String      @default("") @db.VarChar(2000)
  intro_en     String      @default("") @db.VarChar(2000)
  covers       GameCover[] @relation("game_cover")
  images       GameImage[] @relation("game_image")
  release_date DateTime?
  extra_info   Json?       @default(dbgenerated("'[]'::jsonb")) @db.JsonB

  tags       String[]                @default([])
  developers GameDeveloperRelation[] @relation("game_developer")
  characters GameCharacterRelation[] @relation("game_character")
  staffs     Json?                   @default(dbgenerated("'[]'::jsonb")) @db.JsonB
  link       GameLink[]              @relation("game_link")

  nsfw     Boolean  @default(false)
  type     String?
  platform String[] @default([])

  download_resources GameDownloadResource[] @relation("game_download_resource")

  views Int @default(0)

  creator_id Int
  creator    User @relation("user_create_game", fields: [creator_id], references: [id])

  favorite_users GameFavoriteRelation[] @relation("game_favorite")

  comments Comment[] @relation("game_comment")

  status  Int      @default(1)
  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([b_id, v_id])
  @@index([b_id, v_id])
  @@index([b_id])
  @@index([v_id])
  @@map("games")
}

model GameLink {
  id    Int    @id @default(autoincrement())
  url   String
  label String
  name  String

  created DateTime @default(now())
  updated DateTime @updatedAt

  game_id Int
  game    Game @relation("game_link", fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("game_links")
}

model GameCover {
  id Int @id @default(autoincrement())

  language String
  url      String
  type     String
  dims     Int[]
  sexual   Int
  violence Int

  created DateTime @default(now())
  updated DateTime @updatedAt

  game_id Int
  game    Game @relation("game_cover", fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("game_covers")
}

model GameImage {
  id Int @id @default(autoincrement())

  url      String
  dims     Int[]
  sexual   Int
  violence Int

  created DateTime @default(now())
  updated DateTime @updatedAt

  game_id Int
  game    Game @relation("game_image", fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("game_images")
}

// extra_info: Array<Record<key, value>>
model GameDeveloper {
  id         Int      @id @default(autoincrement())
  b_id       String?
  v_id       String?
  name       String   @default("") @db.VarChar(255)
  aliases    String[] @default([])
  logo       String?
  intro_jp   String   @default("") @db.VarChar(2000)
  intro_zh   String   @default("") @db.VarChar(2000)
  intro_en   String   @default("") @db.VarChar(2000)
  extra_info Json?    @default(dbgenerated("'[]'::jsonb")) @db.JsonB

  games GameDeveloperRelation[] @relation("game_produce")

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([b_id, v_id])
  @@index([b_id, v_id])
  @@index([b_id])
  @@index([v_id])
  @@map("game_developers")
}

model GameDeveloperRelation {
  id           Int     @id @default(autoincrement())
  role         String?
  game_id      Int
  developer_id Int

  game      Game          @relation("game_developer", fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  developer GameDeveloper @relation("game_produce", fields: [developer_id], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([game_id, developer_id])
  @@map("game_developer_relations")
}

enum GameCharacterBloodType {
  a
  b
  ab
  o
}

enum GameCharacterGender {
  m
  f
  o
  a
}

enum GameCharacterRole {
  main
  primary
  side
  appears
}

model GameCharacter {
  id         Int                     @id @default(autoincrement())
  b_id       String?
  v_id       String?
  image      String?
  name_jp    String                  @default("")
  name_zh    String?
  name_en    String?
  aliases    String[]                @default([])
  intro_jp   String                  @default("") @db.VarChar(2000)
  intro_zh   String                  @default("") @db.VarChar(2000)
  intro_en   String                  @default("") @db.VarChar(2000)
  blood_type GameCharacterBloodType?
  height     Int?
  weight     Int?
  bust       Int?
  waist      Int?
  hips       Int?
  cup        String?
  age        Int?
  birthday   Int[] // [month, day]
  gender     GameCharacterGender[]   @default([])

  games GameCharacterRelation[] @relation("game_appear_on")

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([b_id, v_id])
  @@index([b_id, v_id])
  @@index([b_id])
  @@index([v_id])
  @@map("game_characters")
}

// extra_info: Array<Record<key, value>>
model GameCharacterRelation {
  id    Int                @id @default(autoincrement())
  image String?
  actor String?
  role  GameCharacterRole?

  game_id      Int
  character_id Int

  game      Game          @relation("game_character", fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  character GameCharacter @relation("game_appear_on", fields: [character_id], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([game_id, character_id])
  @@map("game_character_relations")
}

model GameDownloadResource {
  id      Int                        @id @default(autoincrement())
  game_id Int
  game    Game                       @relation("game_download_resource", fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  files   GameDownloadResourceFile[] @relation("game_download_resource_files")

  platform String[] @default([])
  language String[] @default([])
  note     String?  @db.VarChar(255)

  downloads Int @default(0)

  upload_session_id Int?
  upload_session    GameUploadSession? @relation("game_download_resource_upload_session", fields: [upload_session_id], references: [id])

  creator_id Int
  creator    User @relation("user_create_game_download_resource", fields: [creator_id], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("game_download_resources")
}

// file type: 1 -> s3 native, 2 -> direct link, 3 -> third party link
// file status(effective when file type is 1): 1 -> pending, 2 -> uploaded to server, 3 -> uploaded to s3
// file check status: 0 -> pending, 1 -> ok, 2 -> broken or truncated, 3 -> broken or unsupported, 4 -> encrypted, 5 -> harmful
model GameDownloadResourceFile {
  id        Int     @id @default(autoincrement())
  type      Int
  file_name String
  file_path String?
  file_size BigInt
  file_url  String?
  file_hash String

  upload_session_id Int?
  upload_session    GameUploadSession? @relation("game_download_resource_files_upload_session", fields: [upload_session_id], references: [id])
  file_status       Int                @default(1)
  file_check_status Int                @default(0)

  game_download_resource_id Int
  game_download_resource    GameDownloadResource @relation("game_download_resource_files", fields: [game_download_resource_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  creator_id Int
  creator    User @relation("user_create_game_download_resource_file", fields: [creator_id], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([upload_session_id])
  @@unique([file_path])
  @@index([file_path])
  @@map("game_download_resource_files")
}

model GameFavoriteRelation {
  id      Int @id @default(autoincrement())
  user_id Int
  game_id Int

  user User @relation("user_favorite_game", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  game Game @relation("game_favorite", fields: [game_id], references: [id])

  @@unique([user_id, game_id])
  @@map("game_favorite_relations")
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  game_id Int
  game    Game @relation("game_comment", fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  creator_id Int
  creator    User @relation("user_create_comment", fields: [creator_id], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("comments")
}

enum GameUploadSessionStatus {
  INITIATED
  UPLOADING
  COMPLETED
  ABORTED
  EXPIRED
}

model GameUploadSession {
  id Int @id @default(autoincrement())

  file_name    String
  mime_type    String?
  total_size   BigInt
  chunk_size   Int
  total_chunks Int

  uploaded_chunks Int[] @default([])

  file_sha256  String
  status       GameUploadSessionStatus
  storage_path String

  expires_at DateTime

  game_download_resources      GameDownloadResource[]    @relation("game_download_resource_upload_session")
  game_download_resource_files GameDownloadResourceFile? @relation("game_download_resource_files_upload_session")
  game_upload_chunks           GameUploadChunk[]         @relation("game_upload_session_chunks")

  creator_id Int
  creator    User @relation("user_create_game_upload_session", fields: [creator_id], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([expires_at])
  @@index([status])
  @@map("game_upload_sessions")
}

model GameUploadChunk {
  id Int @id @default(autoincrement())

  game_upload_session_id Int
  game_upload_session    GameUploadSession @relation("game_upload_session_chunks", fields: [game_upload_session_id], references: [id])

  index  Int
  size   Int
  sha256 String

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([game_upload_session_id, index])
  @@index([game_upload_session_id])
  @@map("game_upload_chunks")
}
